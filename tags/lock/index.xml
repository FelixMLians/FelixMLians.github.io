<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lock on Felix&#39;s  Space</title>
    <link>http://felixmlians.github.io/tags/lock/</link>
    <description>Recent content in Lock on Felix&#39;s  Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012 - 2018, Felix M Lians; all rights reserved.</copyright>
    <lastBuildDate>Thu, 27 Aug 2015 17:35:29 +0800</lastBuildDate>
    <atom:link href="http://felixmlians.github.io/tags/lock/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iOS 多线程锁</title>
      <link>http://felixmlians.github.io/2015/08/27/ios-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/</link>
      <pubDate>Thu, 27 Aug 2015 17:35:29 +0800</pubDate>
      
      <guid>http://felixmlians.github.io/2015/08/27/ios-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/</guid>
      <description>

&lt;h4 id=&#34;dispatch-semaphore:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;dispatch_semaphore&lt;/h4&gt;

&lt;p&gt;信号量是一个整形值并且具有一个初始计数值，并且支持两个操作：信号通知和等待。当一个信号量被信号通知，其计数会被增加。当一个线程在一个信号量上等待时，线程会被阻塞（如果有必要的话），直至计数器大于零，然后线程会减少这个计数。&lt;/p&gt;

&lt;p&gt;在GCD中有三个函数是semaphore的操作，分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dispatch_semaphore_create　　　创建一个semaphore&lt;/li&gt;
&lt;li&gt;dispatch_semaphore_signal　　　发送一个信号&lt;/li&gt;
&lt;li&gt;dispatch_semaphore_wait　　　　等待信号&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　简单的介绍一下这三个函数，第一个函数有一个整形的参数，我们可以理解为信号的总量，&lt;code&gt;dispatch_semaphore_signal&lt;/code&gt;是发送一个信号，自然会让信号总量加1，&lt;code&gt;dispatch_semaphore_wait&lt;/code&gt;等待信号，当信号总量少于0的时候就会一直等待，否则就可以正常的执行，并让信号总量-1，根据这样的原理，我们便可以快速的创建一个并发控制来同步任务和有限资源访问控制。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dispatch_group_t group = dispatch_group_create();   
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(10);   
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);   
    for (int i = 0; i &amp;lt; 100; i++)   
    {   
        dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);   
        dispatch_group_async(group, queue, ^{   
            NSLog(@&amp;quot;%i&amp;quot;,i);   
            sleep(2);   
            dispatch_semaphore_signal(semaphore);   
        });   
    }   
    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);   
    dispatch_release(group);   
    dispatch_release(semaphore);   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码创建了一个初使值为10的semaphore，每一次for循环都会创建一个新的线程，线程结束的时候会发送一个信号，线程创建之前会信号等待，所以当同时创建了10个线程之后，for循环就会阻塞，等待有线程结束之后会增加一个信号才继续执行，如此就形成了对并发的控制，如上就是一个并发数为10的一个线程队列。&lt;/p&gt;

&lt;h4 id=&#34;pthread-mutex-t:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;pthread_mutex_t&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果互斥锁类型为 PTHREAD_MUTEX_NORMAL，则不提供死锁检测。尝试重新锁定互斥锁会导致死锁。如果某个线程尝试解除锁定的互斥锁不是由该线程锁定或未锁定，则将产生不确定的行为。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果互斥锁类型为 PTHREAD_MUTEX_ERRORCHECK，则会提供错误检查。如果某个线程尝试重新锁定的互斥锁已经由该线程锁定，则将返回错误。如果某个线程尝试解除锁定的互斥锁不是由该线程锁定或者未锁定，则将返回错误。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果互斥锁类型为 PTHREAD_MUTEX_RECURSIVE，则该互斥锁会保留锁定计数这一概念。线程首次成功获取互斥锁时，锁定计数会设置为 1。线程每重新锁定该互斥锁一次，锁定计数就增加 1。线程每解除锁定该互斥锁一次，锁定计数就减小 1。 锁定计数达到 0 时，该互斥锁即可供其他线程获取。如果某个线程尝试解除锁定的互斥锁不是由该线程锁定或者未锁定，则将返回错误。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果互斥锁类型是 PTHREAD_MUTEX_DEFAULT，则尝试以递归方式锁定该互斥锁将产生不确定的行为。对于不是由调用线程锁定的互斥锁，如果尝试解除对它的锁定，则会产生不确定的行为。如果尝试解除锁定尚未锁定的互斥锁，则会产生不确定的行为。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;//主线程中
TestObj *obj = [[TestObj alloc] init];

__block pthread_mutex_t mutex;
pthread_mutex_init(&amp;amp;mutex, NULL);

//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    pthread_mutex_lock(&amp;amp;mutex);
    [obj method1];
    sleep(5);
    pthread_mutex_unlock(&amp;amp;mutex);
});

//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    sleep(1);
    pthread_mutex_lock(&amp;amp;mutex);
    [obj method2];
    pthread_mutex_unlock(&amp;amp;mutex);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;synchronized:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;@synchronized&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//主线程中
TestObj *obj = [[TestObj alloc] init];

//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    @synchronized(obj){
        [obj method1];
        sleep(10);
    }
});

//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    sleep(1);
    @synchronized(obj){
        [obj method2];
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nslock:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;NSLock&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//主线程中
TestObj *obj = [[TestObj alloc] init];
NSLock *lock = [[NSLock alloc] init];

//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    [lock lock];
    [obj method1];
    sleep(10);
    [lock unlock];
});

//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    sleep(1);//以保证让线程2的代码后执行
    [lock lock];
    [obj method2];
    [lock unlock];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NSLock是Cocoa提供给我们最基本的锁对象，这也是我们经常所使用的，除lock和unlock方法外，NSLock还提供了tryLock和lockBeforeDate:两个方法，前一个方法会尝试加锁，如果锁不可用(已经被锁住)，刚并不会阻塞线程，并返回NO。lockBeforeDate:方法会在所指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO。&lt;/p&gt;

&lt;h4 id=&#34;nsrecursivelock:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;NSRecursiveLock&lt;/h4&gt;

&lt;p&gt;NSRecursiveLock实际上定义的是一个递归锁，这个锁可以被同一线程多次请求，而不会引起死锁。这主要是用在循环或递归操作中。我们先来看一个示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSRecursiveLock *lock = [[NSRecursiveLock alloc] init];
 
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
 
    static void (^RecursiveMethod)(int);
 
    RecursiveMethod = ^(int value) {
 
        [lock lock];
        if (value &amp;gt; 0) {
 
            NSLog(@&amp;quot;value = %d&amp;quot;, value);
            sleep(2);
            RecursiveMethod(value - 1);
        }
        [lock unlock];
    };
 
    RecursiveMethod(5);
});
 
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
 
    sleep(2);
    BOOL flag = [lock lockBeforeDate:[NSDate dateWithTimeIntervalSinceNow:1]];
    if (flag) {
        NSLog(@&amp;quot;lock before date&amp;quot;);
 
        [lock unlock];
    } else {
        NSLog(@&amp;quot;fail to lock before date&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NSRecursiveLock除了实现NSLocking协议的方法外，还提供了两个方法，分别如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 在给定的时间之前去尝试请求一个锁
- (BOOL)lockBeforeDate:(NSDate *)limit
 
// 尝试去请求一个锁，并会立即返回一个布尔值，表示尝试是否成功
- (BOOL)tryLock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，NSRecursiveLock还声明了一个name属性，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@property(copy) NSString *name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以使用这个字符串来标识一个锁。Cocoa也会使用这个name作为错误描述信息的一部分。&lt;/p&gt;

&lt;h4 id=&#34;nscondition:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;NSCondition&lt;/h4&gt;

&lt;p&gt;使用NSCondition，实现多线程的同步，即，可实现生产者消费者问题。&lt;/p&gt;

&lt;p&gt;基本思路是，首先要创建公用的NSCondition实例。然后：&lt;/p&gt;

&lt;p&gt;消费者取得锁，取产品，如果没有，则wait，这时会释放锁，直到有线程唤醒它去消费产品；&lt;/p&gt;

&lt;p&gt;生产者制造产品，首先也是要取得锁，然后生产，再发signal，这样可唤醒wait的消费者。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)conditionTest:(id)sender
{
    NSLog(@&amp;quot;begin condition works!&amp;quot;);
    products = [[NSMutableArray alloc] init];
    condition = [[NSCondition alloc] init];
     
    [NSThread detachNewThreadSelector:@selector(createProducter) toTarget:self withObject:nil];
    [NSThread detachNewThreadSelector:@selector(createConsumenr) toTarget:self withObject:nil];
}
 
- (void)createConsumenr
{
    [condition lock];
    while ([products count] == 0) {
        NSLog(@&amp;quot;wait for products&amp;quot;);
        [condition wait];
    }
    [products removeObjectAtIndex:0];
    NSLog(@&amp;quot;comsume a product&amp;quot;);
    [condition unlock];
}
 
- (void)createProducter
{
    [condition lock];
    [products addObject:[[NSObject alloc] init]];
    NSLog(@&amp;quot;produce a product&amp;quot;);
    [condition signal];
    [condition unlock];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nsconditionlock:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;NSConditionLock&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;//主线程中
NSConditionLock *theLock = [[NSConditionLock alloc] init];

//线程1
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    for (int i=0;i&amp;lt;=2;i++)
    {
        [theLock lock];
        NSLog(@&amp;quot;thread1:%d&amp;quot;,i);
        sleep(2);
        [theLock unlockWithCondition:i];
    }
});

//线程2
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    [theLock lockWhenCondition:2];
    NSLog(@&amp;quot;thread2&amp;quot;);
    [theLock unlock];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nsdistributedlock-分布式锁:21f28a9b1cab32cb5f6a7caf9e0a2884&#34;&gt;NSDistributedLock 分布式锁&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>