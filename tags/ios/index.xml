<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on Felix&#39;s  Space</title>
    <link>http://felixmlians.github.io/tags/ios/</link>
    <description>Recent content in Ios on Felix&#39;s  Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012 - 2018, Felix M Lians; all rights reserved.</copyright>
    <lastBuildDate>Sun, 22 Jun 2014 19:59:51 +0800</lastBuildDate>
    <atom:link href="http://felixmlians.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>什么时候会报unrecognized selector的异常？</title>
      <link>http://felixmlians.github.io/2014/06/22/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A5unrecognized-selector%E7%9A%84%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Sun, 22 Jun 2014 19:59:51 +0800</pubDate>
      
      <guid>http://felixmlians.github.io/2014/06/22/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%8A%A5unrecognized-selector%E7%9A%84%E5%BC%82%E5%B8%B8/</guid>
      <description>

&lt;h4 id=&#34;什么时候会报unrecognized-selector的异常:a9a5119ec17d3de37ee242f6e6968568&#34;&gt;什么时候会报unrecognized selector的异常？&lt;/h4&gt;

&lt;p&gt;简单来说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当调用该对象上某个方法,而该对象上没有实现这个方法的时候， 可以通过“消息转发”进行解决。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;objc&lt;/code&gt;是动态语言，每个方法在运行时会被动态转为消息发送，即：&lt;code&gt;objc_msgSend(receiver, selector)&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;objc&lt;/code&gt;在向一个对象发送消息时，&lt;code&gt;runtime&lt;/code&gt;库会根据对象的&lt;code&gt;isa&lt;/code&gt;指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，如果，在最顶层的父类中依然找不到相应的方法时，程序在运行时会挂掉并抛出异常&lt;code&gt;unrecognized selector sent to XXX&lt;/code&gt; 。但是在这之前，objc的运行时会给出三次拯救程序崩溃的机会：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Method resolution&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;objc&lt;/code&gt;运行时会调用&lt;code&gt;+resolveInstanceMethod:&lt;/code&gt;或者 &lt;code&gt;+resolveClassMethod:&lt;/code&gt;，让你有机会提供一个函数实现。如果你添加了函数，那运行时系统就会重新启动一次消息发送的过程，否则 ，运行时就会移到下一步，消息转发（Message Forwarding）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Fast forwarding&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果目标对象实现了&lt;code&gt;-forwardingTargetForSelector:&lt;/code&gt;，Runtime 这时就会调用这个方法，给你把这个消息转发给其他对象的机会。 只要这个方法返回的不是nil和self，整个消息发送的过程就会被重启，当然发送的对象会变成你返回的那个对象。否则，就会继续Normal Fowarding。 这里叫Fast，只是为了区别下一步的转发机制。因为这一步不会创建任何新的对象，但下一步转发会创建一个NSInvocation对象，所以相对更快点。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Normal forwarding&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这一步是Runtime最后一次给你挽救的机会。首先它会发送&lt;code&gt;-methodSignatureForSelector:&lt;/code&gt;消息获得函数的参数和返回值类型。&lt;/p&gt;

&lt;p&gt;如果&lt;code&gt;-methodSignatureForSelector:&lt;/code&gt;返回nil，Runtime则会发出&lt;code&gt;-doesNotRecognizeSelector:&lt;/code&gt;消息，程序这时也就挂掉了。&lt;/p&gt;

&lt;p&gt;如果返回了一个函数签名，Runtime就会创建一个NSInvocation对象并发送&lt;code&gt;-forwardInvocation:&lt;/code&gt;消息给目标对象。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>